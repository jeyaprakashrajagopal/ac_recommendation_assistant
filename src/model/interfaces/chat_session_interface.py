from abc import ABC, abstractmethod
from typing import Dict, List


class ChatSession(ABC):
    @abstractmethod
    def get_response(self, json_format: bool) -> List[str]:
        """
        To make the chat completions request.

        :param bool json_format: True if response_format is json object False otherwise.
        :return: list of answers
        """
        pass

    @abstractmethod
    def add_message(self, role: str, content: str, name: str = None) -> None:
        """
        To add a message to messages history.

        :param str role: The roles of the message such as system, user
        :param str content: The system message or user message to be sent
        :param str name: str or None. An example can be set i.e. example_user informs the model that this is an example.
        """
        pass

    @abstractmethod
    def update_parameters(
        self,
        max_tokens: int = 100,
        model: str = "gpt-3.5-turbo",
        no_of_choices: int = 1,
        temperature: float = 0,
    ) -> None:
        """
        To update the model parameters.

        :param int max_tokens: Updates the maximum number of output tokens to produce.
        :param str model: Updates the model
        :param int no_of_choices: Toatl number of answers required from the model
        :param float temperature: This parameter decides how random the output should be generated by the model.
        """
        pass

    @abstractmethod
    def get_parameters(self) -> List[str]:
        pass

    @abstractmethod
    def reset_messages(self) -> None:
        pass

    @abstractmethod
    def get_messages(self) -> List[Dict]:
        """
        To get the messages history.

        :return List[Dict]: returns the message history.
        """
        pass
