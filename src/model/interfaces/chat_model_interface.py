from abc import ABC, abstractmethod
from typing import Dict, List


class ChatModel(ABC):
    @abstractmethod
    def get_session_response(self, json_format: bool, tools: Dict = None) -> List[str]:
        """
        Return the response using the accumulated session and it returns the assistant's reply to the user input.

        :param bool json_format: True if response_format is json object False otherwise.
        :return: list of answers
        """
        pass

    @abstractmethod
    def preview_response(
        self, messages: List[Dict], json_format: bool
    ) -> List[str | Dict]:
        """
        Stateless, one-time request from the given messages.
        This method does not read or modify the internal session.

        :param List[Dict] messages: List of messages to be passed to the model.
        :param bool json_format: True if response_format is json object False otherwise.
        :return: list of answers
        """
        pass

    @abstractmethod
    def update_parameters(
        self,
        max_tokens: int = 100,
        model: str = "gpt-3.5-turbo",
        no_of_choices: int = 1,
        temperature: float = 0,
        seed=None,
    ) -> None:
        """
        To update the model parameters.

        :param int max_tokens: Updates the maximum number of output tokens to produce.
        :param str model: Updates the model
        :param int no_of_choices: Toatl number of answers required from the model
        :param float temperature: This parameter decides how random the output should be generated by the model.
        """
        pass

    @abstractmethod
    def add_message(
        self,
        role: str,
        content: str = None,
        name: str = None,
        tool_calls: List[Dict] = None,
        tool_call_id: str = None,
    ) -> None:
        """
        To add a message to messages history.

        :param str role: The roles of the message such as system, user
        :param str content: The system message or user message to be sent
        :param str name: str or None. An example can be set i.e. example_user informs the model that this is an example.
        """
        pass

    @abstractmethod
    def add_chat_completion_message(self, message) -> None:
        """
        To add the complete chat completion message to messages history.

        :param message role: The complete chat completion message
        """
        pass

    @abstractmethod
    def clear_messages(self) -> None:
        """
        To clear the messages history since the chat can go on forever with the user.
        """
        pass
